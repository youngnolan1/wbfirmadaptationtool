dir.create(base_dir, recursive = TRUE)
# Create all sub-directories
for (sub_dir in sub_dirs) {
dir.create(file.path(base_dir, sub_dir), recursive = TRUE)
}
message("Directories created successfully.")
}
#---------------------------------- EXPORT -------------------------------------
#' @title Subset master geo-linked WBES dataset based on survey, country, or region.
#'
#' @description
#' The exhaustive_analysis() function runs all possible analysis offered by the wbfirmadaptation package, saving results in a series of folders within a specified directory.
#'
#' @import haven
#' @import dplyr
#' @import ggplot2
#' @import sandwich
#' @import stargazer
#'
#' @param data_file_path A string of the user's file path to the raw data.
#' @param filter_value A string that indicates the value of the country, survey (CountryYear), or region the user wants to analyze.
#' @param subset_type A string that indicates the type of subsetting: "survey", "country", or "region".
#' @param output_directory A string containing the directory in which the results will be saved.
#'
#' @return All possible analysis (tables and charts from regressions) offered by the wbfirmadaptation package saved in output_directory.
#'
#' @export
exhaustive_analysis <- function(data_file_path, filter_value, subset_type, html_or_tex, output_directory){
# Validate inputs
if (!is.character(data_file_path) || length(data_file_path) != 1) {
stop("Error: 'data_file_path' must be a single string.")
}
if (!is.character(filter_value) || length(filter_value) != 1) {
stop("Error: 'filter_value' must be a single string.")
}
if (!is.character(subset_type) || length(subset_type) != 1) {
stop("Error: 'subset_type' must be a single string.")
}
if (!subset_type %in% c("survey", "country", "region")) {
stop("Error: 'subset_type' must be either 'survey', 'country', or 'region'.")
}
if (!is.character(html_or_tex) || length(html_or_tex) != 1) {
stop("Error: 'html_or_tex' must be a single string.")
}
if (!html_or_tex %in% c("html", "tex")) {
stop("Error: 'html_or_tex' must be either 'html' or 'tex'.")
}
if (!is.character(output_directory) || length(output_directory) != 1) {
stop("Error: 'output_directory' must be a single string.")
}
# Create directories
subdirectories <- c("Climate_Impact_On_Firm_Performance",
"Climate_Impact_On_Firm_Performance/Charts", "Climate_Impact_On_Firm_Performance/Tables",
"Interactions",
"Interactions/Sales", "Interactions/SalesPerWorker", "Interactions/Investment"
)
create_directories(output_directory, subdirectories)
# --- Step 1. Subset data ---
data <- data_subset(data_file_path, filter_value, subset_type)
# --- Step 2. Prepare data for regressions ---
reg_data <- prep_reg_data(data)
# --- Step 3. Climate impact on firm performance regressions ---
# Charts
for (level_or_difference in c("Level", "Difference")){
climate_on_firm_regs_charts(data = reg_data,
level_or_difference = level_or_difference,
output_directory = paste0(output_directory, "/Climate_Impact_On_Firm_Performance/Charts"))
}
# Tables
for (level_or_difference in c("Level", "Difference")){
climate_on_firm_regs_tables(data = reg_data,
level_or_difference = level_or_difference,
html_or_tex = html_or_tex,
output_directory = paste0(output_directory, "/Climate_Impact_On_Firm_Performance/Tables"))
}
# --- Step 4. Interactions with firm characteristics/policy vars
# Characteristics and policy vars to include in regs
characteristics_policy_vars <- c("Young", "Small", "MarketServed", # Firm characteristics
"AccessToFinanceIndex", "RegulationIndex", "LaborForceIndex", # Indices
"SecurityIndex", "ExportOrientationIndex", "ElectricityIndex", # Indices
"Transport", "DomesticInputs", # Transport and value chains
"ManagerialExperience", "FemaleManager" # Management
)
# Loop through dependent variables
for (dependent_var in c("Sales", "SalesPerWorker", "Investment")){
if (dependent_var %in% c("Sales", "SalesPerWorker")){
var_name_append <- "Log"
} else {
var_name_append <- "Binary"
}
# Loop through climate variables
for (climate_var in c("Temperature", "TemperatureVolatility", "HeatDays")){
# Loop through using levels or differences
for (level_or_difference in c("Level", "Difference")){
interaction_reg_table(reg_data = reg_data,
firm_outcome = paste0(dependent_var, var_name_append),
climate_var = climate_var,
level_or_difference = level_or_difference,
firm_characteristics = characteristics_policy_vars,
html_or_tex = html_or_tex,
filename = paste0(climate_var, "_", level_or_difference),
output_directory = paste0(output_directory, "/Interactions/", dependent_var))
}
}
}
}
# Script 5
exhaustive_analysis("C:/Users/young/OneDrive/Escritorio/wbfirmadaptation_snapshots/master.dta",
"MEA",
"region",
"html",
"C:/Users/young/OneDrive/Documents/test")
# Directory creation function
create_directories <- function(base_dir, sub_dirs) {
# Validate inputs
if (!is.character(base_dir) || !is.character(sub_dirs)) {
stop("Error: 'base_dir' and 'sub_dirs' must be character strings.")
}
# Create the full paths for all sub-directories
sub_dir_paths <- file.path(base_dir, sub_dirs)
# Check if any of the sub-directories or base directory already exist
existing_dirs <- sub_dir_paths[dir.exists(sub_dir_paths)]  # Check sub-directories
if (dir.exists(base_dir)) {
existing_dirs <- c(base_dir, existing_dirs)  # Include the base directory if it exists
}
# If any directories already exist, prompt the user
if (length(existing_dirs) > 0) {
response <- readline(paste("Some directories already exist. Overwrite all? (y/n): "))
# If the user chooses not to overwrite, exit the function
if (tolower(response) != "y") {
message("Operation cancelled. No directories were overwritten.")
return(invisible())
}
# If the user confirms, remove the base directory and everything inside it
unlink(base_dir, recursive = TRUE)
message("Existing directories removed.")
}
# Create the base directory
dir.create(base_dir, recursive = TRUE)
# Create all sub-directories
for (sub_dir in sub_dirs) {
dir.create(file.path(base_dir, sub_dir), recursive = TRUE)
}
message("Directories created successfully.")
}
#---------------------------------- EXPORT -------------------------------------
#' @title Subset master geo-linked WBES dataset based on survey, country, or region.
#'
#' @description
#' The exhaustive_analysis() function runs all possible analysis offered by the wbfirmadaptation package, saving results in a series of folders within a specified directory.
#'
#' @import haven
#' @import dplyr
#' @import ggplot2
#' @import sandwich
#' @import stargazer
#'
#' @param data_file_path A string of the user's file path to the raw data.
#' @param filter_value A string that indicates the value of the country, survey (CountryYear), or region the user wants to analyze.
#' @param subset_type A string that indicates the type of subsetting: "survey", "country", or "region".
#' @param output_directory A string containing the directory in which the results will be saved.
#'
#' @return All possible analysis (tables and charts from regressions) offered by the wbfirmadaptation package saved in output_directory.
#'
#' @export
exhaustive_analysis <- function(data_file_path, filter_value, subset_type, html_or_tex, output_directory){
# Validate inputs
if (!is.character(data_file_path) || length(data_file_path) != 1) {
stop("Error: 'data_file_path' must be a single string.")
}
if (!is.character(filter_value) || length(filter_value) != 1) {
stop("Error: 'filter_value' must be a single string.")
}
if (!is.character(subset_type) || length(subset_type) != 1) {
stop("Error: 'subset_type' must be a single string.")
}
if (!subset_type %in% c("survey", "country", "region")) {
stop("Error: 'subset_type' must be either 'survey', 'country', or 'region'.")
}
if (!is.character(html_or_tex) || length(html_or_tex) != 1) {
stop("Error: 'html_or_tex' must be a single string.")
}
if (!html_or_tex %in% c("html", "tex")) {
stop("Error: 'html_or_tex' must be either 'html' or 'tex'.")
}
if (!is.character(output_directory) || length(output_directory) != 1) {
stop("Error: 'output_directory' must be a single string.")
}
# Create directories
subdirectories <- c("Climate_Impact_On_Firm_Performance",
"Climate_Impact_On_Firm_Performance/Charts", "Climate_Impact_On_Firm_Performance/Tables",
"Interactions",
"Interactions/Sales", "Interactions/SalesPerWorker", "Interactions/Investment"
)
create_directories(output_directory, subdirectories)
# --- Step 1. Subset data ---
data <- data_subset(data_file_path, filter_value, subset_type)
# --- Step 2. Prepare data for regressions ---
reg_data <- prep_reg_data(data)
# --- Step 3. Climate impact on firm performance regressions ---
# Charts
for (level_or_difference in c("Level", "Difference")){
climate_on_firm_regs_charts(data = reg_data,
level_or_difference = level_or_difference,
output_directory = paste0(output_directory, "/Climate_Impact_On_Firm_Performance/Charts"))
}
# Tables
for (level_or_difference in c("Level", "Difference")){
climate_on_firm_regs_tables(data = reg_data,
level_or_difference = level_or_difference,
html_or_tex = html_or_tex,
output_directory = paste0(output_directory, "/Climate_Impact_On_Firm_Performance/Tables"))
}
# --- Step 4. Interactions with firm characteristics/policy vars
# Characteristics and policy vars to include in regs
characteristics_policy_vars <- c("Young", "Small", "MarketServed", # Firm characteristics
"AccessToFinanceIndex", "RegulationIndex", "LaborForceIndex", # Indices
"SecurityIndex", "ExportOrientationIndex", "ElectricityIndex", # Indices
"Transport", "DomesticInputs", # Transport and value chains
"ManagerialExperience", "FemaleManager" # Management
)
# Loop through dependent variables
for (dependent_var in c("Sales", "SalesPerWorker", "Investment")){
if (dependent_var %in% c("Sales", "SalesPerWorker")){
var_name_append <- "Log"
} else {
var_name_append <- "Binary"
}
# Loop through climate variables
for (climate_var in c("Temperature", "TemperatureVolatility", "HeatDays")){
# Loop through using levels or differences
for (level_or_difference in c("Level", "Difference")){
interaction_reg_table(reg_data = reg_data,
firm_outcome = paste0(dependent_var, var_name_append),
climate_var = climate_var,
level_or_difference = level_or_difference,
firm_characteristics = characteristics_policy_vars,
html_or_tex = html_or_tex,
filename = paste0(climate_var, "_", level_or_difference),
output_directory = paste0(output_directory, "/Interactions/", dependent_var))
}
}
}
}
# Script 5
exhaustive_analysis("C:/Users/young/OneDrive/Escritorio/wbfirmadaptation_snapshots/master.dta",
"MEA",
"region",
"html",
"C:/Users/young/OneDrive/Documents/test")
# Directory creation function
create_directories <- function(base_dir, sub_dirs) {
# Validate inputs
if (!is.character(base_dir) || !is.character(sub_dirs)) {
stop("Error: 'base_dir' and 'sub_dirs' must be character strings.")
}
# Create the full paths for all sub-directories
sub_dir_paths <- file.path(base_dir, sub_dirs)
# Check if any of the sub-directories or base directory already exist
existing_dirs <- sub_dir_paths[dir.exists(sub_dir_paths)]  # Check sub-directories
if (dir.exists(base_dir)) {
existing_dirs <- c(base_dir, existing_dirs)  # Include the base directory if it exists
}
# If any directories already exist, prompt the user
if (length(existing_dirs) > 0) {
response <- readline(paste("Some directories already exist. Overwrite all? (y/n): "))
# If the user chooses not to overwrite, exit the function
if (tolower(response) != "y") {
stop("Operation cancelled. No directories were overwritten.")
}
# If the user confirms, remove the base directory and everything inside it
unlink(base_dir, recursive = TRUE)
message("Existing directories removed.")
}
# Create the base directory
dir.create(base_dir, recursive = TRUE)
# Create all sub-directories
for (sub_dir in sub_dirs) {
dir.create(file.path(base_dir, sub_dir), recursive = TRUE)
}
message("Directories created successfully.")
}
#---------------------------------- EXPORT -------------------------------------
#' @title Subset master geo-linked WBES dataset based on survey, country, or region.
#'
#' @description
#' The exhaustive_analysis() function runs all possible analysis offered by the wbfirmadaptation package, saving results in a series of folders within a specified directory.
#'
#' @import haven
#' @import dplyr
#' @import ggplot2
#' @import sandwich
#' @import stargazer
#'
#' @param data_file_path A string of the user's file path to the raw data.
#' @param filter_value A string that indicates the value of the country, survey (CountryYear), or region the user wants to analyze.
#' @param subset_type A string that indicates the type of subsetting: "survey", "country", or "region".
#' @param output_directory A string containing the directory in which the results will be saved.
#'
#' @return All possible analysis (tables and charts from regressions) offered by the wbfirmadaptation package saved in output_directory.
#'
#' @export
exhaustive_analysis <- function(data_file_path, filter_value, subset_type, html_or_tex, output_directory){
# Validate inputs
if (!is.character(data_file_path) || length(data_file_path) != 1) {
stop("Error: 'data_file_path' must be a single string.")
}
if (!is.character(filter_value) || length(filter_value) != 1) {
stop("Error: 'filter_value' must be a single string.")
}
if (!is.character(subset_type) || length(subset_type) != 1) {
stop("Error: 'subset_type' must be a single string.")
}
if (!subset_type %in% c("survey", "country", "region")) {
stop("Error: 'subset_type' must be either 'survey', 'country', or 'region'.")
}
if (!is.character(html_or_tex) || length(html_or_tex) != 1) {
stop("Error: 'html_or_tex' must be a single string.")
}
if (!html_or_tex %in% c("html", "tex")) {
stop("Error: 'html_or_tex' must be either 'html' or 'tex'.")
}
if (!is.character(output_directory) || length(output_directory) != 1) {
stop("Error: 'output_directory' must be a single string.")
}
# Create directories
subdirectories <- c("Climate_Impact_On_Firm_Performance",
"Climate_Impact_On_Firm_Performance/Charts", "Climate_Impact_On_Firm_Performance/Tables",
"Interactions",
"Interactions/Sales", "Interactions/SalesPerWorker", "Interactions/Investment"
)
create_directories(output_directory, subdirectories)
# --- Step 1. Subset data ---
data <- data_subset(data_file_path, filter_value, subset_type)
# --- Step 2. Prepare data for regressions ---
reg_data <- prep_reg_data(data)
# --- Step 3. Climate impact on firm performance regressions ---
# Charts
for (level_or_difference in c("Level", "Difference")){
climate_on_firm_regs_charts(data = reg_data,
level_or_difference = level_or_difference,
output_directory = paste0(output_directory, "/Climate_Impact_On_Firm_Performance/Charts"))
}
# Tables
for (level_or_difference in c("Level", "Difference")){
climate_on_firm_regs_tables(data = reg_data,
level_or_difference = level_or_difference,
html_or_tex = html_or_tex,
output_directory = paste0(output_directory, "/Climate_Impact_On_Firm_Performance/Tables"))
}
# --- Step 4. Interactions with firm characteristics/policy vars
# Characteristics and policy vars to include in regs
characteristics_policy_vars <- c("Young", "Small", "MarketServed", # Firm characteristics
"AccessToFinanceIndex", "RegulationIndex", "LaborForceIndex", # Indices
"SecurityIndex", "ExportOrientationIndex", "ElectricityIndex", # Indices
"Transport", "DomesticInputs", # Transport and value chains
"ManagerialExperience", "FemaleManager" # Management
)
# Loop through dependent variables
for (dependent_var in c("Sales", "SalesPerWorker", "Investment")){
if (dependent_var %in% c("Sales", "SalesPerWorker")){
var_name_append <- "Log"
} else {
var_name_append <- "Binary"
}
# Loop through climate variables
for (climate_var in c("Temperature", "TemperatureVolatility", "HeatDays")){
# Loop through using levels or differences
for (level_or_difference in c("Level", "Difference")){
interaction_reg_table(reg_data = reg_data,
firm_outcome = paste0(dependent_var, var_name_append),
climate_var = climate_var,
level_or_difference = level_or_difference,
firm_characteristics = characteristics_policy_vars,
html_or_tex = html_or_tex,
filename = paste0(climate_var, "_", level_or_difference),
output_directory = paste0(output_directory, "/Interactions/", dependent_var))
}
}
}
}
# Script 5
exhaustive_analysis("C:/Users/young/OneDrive/Escritorio/wbfirmadaptation_snapshots/master.dta",
"MEA",
"region",
"html",
"C:/Users/young/OneDrive/Documents/test")
# Script 5
exhaustive_analysis("C:/Users/young/OneDrive/Escritorio/wbfirmadaptation_snapshots/master.dta",
"MEA",
"region",
"html",
"C:/Users/young/OneDrive/Documents/test")
bla <- read_dta("C:/Users/young/OneDrive/Escritorio/wbfirmadaptation_snapshots/master.dta")
unique(bla$country)
table(bla$region)
table(bla$regionname)
mea <- bla %>% filter(region == "MEA")
table(mea$country)
regional <- bla %>% filter(region == "LCN")
table(regional$country)
rm(mea)
regional <- bla %>% filter(region == "ECS")
table(regional$country)
regional <- bla %>% filter(region == "SAS")
table(regional$country)
regional <- bla %>% filter(region == "EAS")
table(regional$country)
regional <- bla %>% filter(region == "SSF")
table(regional$country)
table(regional$country, regional$year)
table(regional$countryname, regional$year)
table(regional$country)
regional <- bla %>% filter(region == "EAS")
table(regional$country)
regional <- bla %>% filter(region == "SAS")
table(regional$country)
regional <- bla %>% filter(region == "ECS")
table(regional$country)
regional <- bla %>% filter(region == "LCN")
table(regional$country)
359+332
regional <- bla %>% filter(region == "MEA")
table(regional$country)
#-------------------------------------------------------------------------------
# Script: presentation_graph_regs.R
# Author: Nolan Young Zabala
# Description: - run regs needed for presentation charts
#              - export results for plotting in Excel
#-------------------------------------------------------------------------------
#------------------------------- SET UP ----------------------------------------
# Set working directory
setwd("C:/Users/young/OneDrive/Escritorio/wb-climate-pilots-bangladesh")
# Load libraries
library(dplyr)
library(tidyr)
library(openxlsx)
library(sandwich)
library(lmtest)
library(ggplot2)
# Load processed data (created by "reg_dataprep_22.R")
reg_master <- read.csv("intermediate_data/enterprise_survey/BanglaRegAnalysisData_Presentation_22.csv")
# Function with specification
interaction_reg <- function(climate_var, firm_characteristic){
# Build the formula: log(sales) = climate_var + firm_characteristic + climate_var:firm_characteristic + sector + region
formula <- as.formula(paste("invest_fixed_assets_dummy ~ ", climate_var, " + ", firm_characteristic, " + ", climate_var, ":", firm_characteristic, " + sector"))
# Run the regression
model <- lm(formula,
data = reg_master)
robust_se <- coeftest(model, vcov = vcovHC(model, type = "HC1", cluster = ~reg_master$sector))
return(robust_se)
}
# Age (2022 - b5; then dummy, young if under 5 and old if over
interaction_age_hd <- interaction_reg("heat_days_deviation", "young")
# Access to finance (k30)
interaction_accesstofinance_hd <- interaction_reg("tempvolatility_deviation", "obstacle_accesstofinance")
# Business licensing (j30c)
interaction_businesslicensing_hd <- interaction_reg("tempvolatility_deviation", "obstacle_businesslicensing")
interaction_accesstofinance_hd
# Function with specification
interaction_reg <- function(climate_var, firm_characteristic){
# Build the formula: log(sales) = climate_var + firm_characteristic + climate_var:firm_characteristic + sector + region
formula <- as.formula(paste("log(sales) ~ ", climate_var, " + ", firm_characteristic, " + ", climate_var, ":", firm_characteristic, " + sector"))
# Run the regression
model <- lm(formula,
data = reg_master)
robust_se <- coeftest(model, vcov = vcovHC(model, type = "HC1", cluster = ~reg_master$sector))
return(robust_se)
}
# Access to finance (k30)
interaction_accesstofinance_hd <- interaction_reg("tempvolatility_deviation", "obstacle_accesstofinance")
interaction_accesstofinance_hd
-3.628760+0.759872
sd(reg_master$tempvolatility_deviation)
0.1016227*-2.868888
-2.868888+0.640472
-2.228416*0.1016227
# Business licensing (j30c)
interaction_businesslicensing_hd <- interaction_reg("tempvolatility_deviation", "obstacle_businesslicensing")
interaction_businesslicensing_hd
0.848138+0.299771+-1.159053
-0.011144*0.1016227
0.640472*0.1016227
# Function with specification
interaction_reg <- function(climate_var, firm_characteristic){
# Build the formula: log(sales) = climate_var + firm_characteristic + climate_var:firm_characteristic + sector + region
formula <- as.formula(paste("log(sales) ~ ", climate_var, " + ", firm_characteristic, " + ", climate_var, ":", firm_characteristic, " + sector"))
# Run the regression
model <- lm(formula,
data = reg_master)
robust_se <- coeftest(model, vcov = vcovHC(model, type = "HC1", cluster = ~reg_master$sector))
return(robust_se)
}
# Business licensing (j30c)
interaction_businesslicensing_hd <- interaction_reg("tempvolatility_deviation", "obstacle_businesslicensing")
interaction_businesslicensing_hd
# Function with specification
interaction_reg <- function(climate_var, firm_characteristic){
# Build the formula: log(sales) = climate_var + firm_characteristic + climate_var:firm_characteristic + sector + region
formula <- as.formula(paste("invest_fixed_assets_dummy ~ ", climate_var, " + ", firm_characteristic, " + ", climate_var, ":", firm_characteristic, " + sector"))
# Run the regression
model <- lm(formula,
data = reg_master)
robust_se <- coeftest(model, vcov = vcovHC(model, type = "HC1", cluster = ~reg_master$sector))
return(robust_se)
}
# Business licensing (j30c)
interaction_businesslicensing_hd <- interaction_reg("tempvolatility_deviation", "obstacle_businesslicensing")
interaction_businesslicensing_hd
-1.4666+0.57935+0.14295
-0.7443*sd(reg_master$tempvolatility_deviation)
0.14295*sd(reg_master$tempvolatility_deviation)
